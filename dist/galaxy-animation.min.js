(() => {
  var g = (t) =>
      (...o) =>
        (n) => {
          try {
            return n[t](...o);
          } catch (e) {
            console.log(t), console.log(o), console.log(n), console.error(e);
          }
        },
    r = document.getElementById("galaxy-canvas"),
    l = document.createElement("canvas"),
    s = g("getContext")("2d");
  r.width = window.innerWidth;
  r.height = window.innerHeight;
  l.width = 100;
  l.height = 100;
  var f = 217,
    w = (t) =>
      ({ radius: o, timePassed: n, orbitRadius: e, orbitX: h, orbitY: d }) => {
        let m = Math.sin(n + 1) * e + h, p = Math.cos(n) * e / 2 + d;
        t.drawImage(l, m - o / 2, p - o / 2, o, o);
      },
    a = (t) => t / 2,
    C = (t) => {
      let o = s(t),
        { width: n } = t,
        e = o.createRadialGradient(a(n), a(n), 0, a(n), a(n), a(n));
      e.addColorStop(.025, "#fff"),
        e.addColorStop(.1, "hsl(" + 217 + ", 61%, 33%)"),
        e.addColorStop(.25, "hsl(" + 217 + ", 64%, 6%)"),
        e.addColorStop(1, "transparent"),
        o.fillStyle = e,
        o.beginPath(),
        o.arc(a(n), a(n), a(n), 0, Math.PI * 2),
        o.fill();
    },
    i = (...t) => {
      let [o, n] = t;
      return t.length < 2
        ? Math.floor(Math.random() * (o - 0 + 1))
        : o > n
        ? Math.floor(Math.random() * (o - n + 1)) + n
        : Math.floor(Math.random() * (n - o + 1)) + o;
    },
    M = (t) => [...Array(t).keys()],
    y = (t) => {
      let o = s(t);
      o.globalCompositeOperation = "source-over",
        o.globalAlpha = .8,
        o.fillStyle = "hsla(" + f + ", 64%, 6%, 1)",
        o.fillRect(0, 0, t.width, t.height),
        o.globalCompositeOperation = "lighter";
    },
    u = (t) => ({ ...t, timePassed: t.timePassed + t.speed }),
    S = (t) => ({
      orbitRadius: i(r.width / 2 - 50),
      radius: i(100, t) / 10,
      orbitX: a(r.width),
      orbitY: a(r.height),
      timePassed: i(0, 1400),
      speed: i(t) / 1e5,
      alpha: i(2, 10) / 10,
    }),
    x = (t) => {
      let o = i(10), { alpha: n } = t;
      return o === 1 && n > 0
        ? { ...t, alpha: n - .05 }
        : o === 2 && n < 1
        ? { ...t, alpha: n + .05 }
        : t;
    },
    c = (t, o) =>
      () => {
        y(t), o.forEach(w(s(t)));
        let n = o.map(x).map(u);
        requestAnimationFrame(c(t, n));
      },
    b = () => {
      C(l);
      let t = M(1400).map((o) => S(i(r.width / 2 - 50)));
      c(r, t)();
    };
  b();
})();
